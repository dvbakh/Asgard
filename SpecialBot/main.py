import logging
from vkbottle import BaseStateGroup, GroupEventType, VKAPIError, CtxStorage, Keyboard, Text, KeyboardButtonColor, EMPTY_KEYBOARD
from vkbottle.bot import Bot, Message, MessageEvent
from vkbottle.api import API
from db import BotDB
import random
import nest_asyncio
nest_asyncio.apply()
  # –Ø –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–ª —á—É–∂–æ–π –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥ –Ω–∞ aiogram'e –∏ —Å –≥–æ—Ç–æ–≤–æ–π –±–¥ –≤ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫, –ø–æ—ç—Ç–æ–º—É –±–¥ –æ—Å—Ç–∞–≤–∏–ª.
  # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –±–¥ –∏ –Ω–∞–∑–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ.


token = ""
group_id = "220697093"
bot = Bot(token)
api = API(bot)
api.groups.get_long_poll_server

ctx = CtxStorage()
logging.getLogger("vkbottle").setLevel(logging.DEBUG)
BotDB = BotDB('/data/database.db')

@bot.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent)
async def handle_raw_event(event: dict):
    print("Received raw event:", event)
    if "type" in event and event["type"] == "message_new":
        print("Received new message event")
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        msg = Message(bot, event)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.dispenser.process_event(msg)

  # –ë–ª–∞–Ω–∫–∏

menu_main_text = '1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n2. –°–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n3. –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n4. –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É'
my_anketa_text = '1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ\n2. –ò–∑–º–µ–Ω–∏—Ç—å –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã\n4. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'


  # –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

keyboard_menu = Keyboard(one_time=False, inline = True)
keyboard_menu.add(Text("1"), color=KeyboardButtonColor.PRIMARY)
keyboard_menu.add(Text("2"), color=KeyboardButtonColor.PRIMARY)
keyboard_menu.add(Text("3"), color=KeyboardButtonColor.PRIMARY)
keyboard_menu.add(Text("4"), color=KeyboardButtonColor.PRIMARY)

def show_anketa(name, age, favorits, text, link):
  return f'–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–õ—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã: {favorits}\n–û —Å–µ–±–µ: {text}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∫: {link}'

def get_random_anketa(list_of_anketi):
  anketa = list_of_anketi[random.randint(0, len(list_of_anketi) - 1)]
  a = anketa
  return [show_anketa(a[2], a[3], a[7], a[5], a[4]), a[1]]

def is_member(group_id: int, user_id: int) -> bool:
  return api.groups.is_member(access_token=token,
                                 group_id=group_id,
                                 user_id=user_id)

  # –°—Ç–µ–π—Ç—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞

class Reg(BaseStateGroup):
  CHOOSING_GENDER = 0
  name = 1
  age = 2
  favorits = 3
  text = 4
  link = 5
  menu_answer = 6
  my_anketa_answer = 7
  change_text = 8
  change_inter = 9
  delete_confirm = 10
  anketa_reaction = 11
  all_anketa_reaction = 12
  end = 13


@bot.on.message(payload={"command": "start"})
@bot.on.message(text=["/start", "–ü—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤–µ—Ç", "–ù–∞—á–∞—Ç—å", "–Ω–∞—á–∞—Ç—å"])
async def anketa_start(message: Message):
    print("Received message:", message.text)

    if not BotDB.user_exists(message.from_id):
        BotDB.add_user(message.from_id)

    if BotDB.anketa_exists(message.from_id):
        anketa = BotDB.get_anketa(message.from_id)
        a = anketa[0]
        caption = show_anketa(a[2], a[3], a[7], a[5], a[4])
        print("Existing anketa found:", caption)

        await message.answer(message=menu_main_text, keyboard=keyboard_menu)
        await bot.state_dispenser.set(message.from_id, Reg.menu_answer)

    else:
        print("No existing anketa found")
        keyboard = Keyboard(one_time=False, inline=True)
        keyboard.add(Text("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"), color=KeyboardButtonColor.PRIMARY)

        await message.answer(message='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ö–∏–Ω–æ–¢–∏–Ω–¥–µ—Ä. –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º? –¢–æ–≥–¥–∞ —Å–∫–æ—Ä–µ–µ –Ω–∞—á–∏–Ω–∞–π –∏ –∂–º–∏ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"üòÅ',
                             keyboard=keyboard)

@bot.on.message(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
async def check_mem(message: Message):
  if not is_member(group_id, message.from_id):
    await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—Éüòµ–î–∞–≤–∞–π —Å–∫–æ—Ä–µ–µ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëâ (https://vk.com/specialrole)")
    return
  await message.answer(message = "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", keyboard=EMPTY_KEYBOARD)
  await bot.state_dispenser.set(message.from_id, Reg.name)

@bot.on.message(state = Reg.name)
async def name(message: Message):
  if len(message.text) > 30:
    await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è")
    return
  ctx.set(f'name{message.from_id}', message.text)
  ctx.set(f'gender{message.from_id}', '0')
  await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
  await bot.state_dispenser.set(message.from_id, Reg.age)

@bot.on.message(state = Reg.age)
async def age(message: Message):
  try:
    if 10 > int(message.text) or int(message.text) > 100:
      await message.answer("–ö–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
      return
  except(TypeError, ValueError):
    await message.answer("–ö–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    return
  ctx.set(f'age{message.from_id}', message.text)

  await message.answer("–ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤. –ü–æ–∏—Å–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ –Ω–∏–º, —Ç–∞–∫ —á—Ç–æ —á–µ–º –±–æ–ª—å—à–µ —É–∫–∞–∂–µ—à—å, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –∫–æ–≥–æ-—Ç–æ)")
  await bot.state_dispenser.set(message.from_id, Reg.favorits)

@bot.on.message(state = Reg.favorits)
async def favorits(message: Message):
  ctx.set(f'favorits{message.from_id}', message.text)

  await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫–∏–µ –∂–∞–Ω—Ä—ã —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è? –ö–∞–∫ –¥–∞–≤–Ω–æ –∏ –ø–æ—á–µ–º—É –Ω–∞—á–∞–ª —Å–º–æ—Ç—Ä–µ—Ç—å –∫–∏–Ω–æ/—Å–µ—Ä–∏–∞–ª—ã? –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ, —á—Ç–æ, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –¥—É—à–µ.")
  await bot.state_dispenser.set(message.from_id, Reg.text)

@bot.on.message(state = Reg.text)
async def text(message: Message):
  if len(message.text) > 500:
    await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –µ–≥–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å")
    return
  ctx.set(f'text{message.from_id}', message.text)

  await message.answer(message = "–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –≤–∫ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞—á–∏–Ω–∞—è —Å https://vk.com/...)")
  await bot.state_dispenser.set(message.from_id, Reg.link)

@bot.on.message(state = Reg.link)
async def link(message: Message):
  if 'https://vk.com/' not in message.text:
    await message.answer("–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—â–µ —Ä–∞–∑")
    return
  ctx.set(f'link{message.from_id}', message.text)
  keyboard = Keyboard(one_time=False, inline=True)
  keyboard.add(Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"), color=KeyboardButtonColor.POSITIVE)

  await message.answer("–û—Ç–ª–∏—á–Ω–æ, –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å–µ –Ω–∞ –º–µ—Å—Ç–µ", keyboard=keyboard)
  await bot.state_dispenser.set(message.from_id, Reg.end)

@bot.on.message(state = Reg.end)
async def end(message: Message):

  data=[]
  data.append(ctx.get(f'name{message.from_id}'))
  data.append(ctx.get(f'gender{message.from_id}'))
  data.append(ctx.get(f'age{message.from_id}'))
  data.append(ctx.get(f'favorits{message.from_id}'))
  data.append(ctx.get(f'text{message.from_id}'))
  data.append(ctx.get(f'link{message.from_id}'))
  d = list(data)
  print(d)

  BotDB.add_anketa(message.from_id, d[0], d[1], d[2], d[3], d[4], d[5])

  caption = show_anketa(d[0], d[2], d[3], d[4], d[5])
  await message.answer("–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: ")
  await message.answer(caption)

  await message.answer(menu_main_text, keyboard = keyboard_menu)
  await bot.state_dispenser.set(message.from_id, Reg.menu_answer)


@bot.on.message(state = Reg.menu_answer)
async def menu_answer(message: Message):
  if message.text == "1":
    anketa = BotDB.get_anketa(message.from_id)
    a = anketa[0]
    caption = show_anketa(a[2], a[3], a[7], a[5], a[4])

    u_list_of_anketi = BotDB.find_anketi(message.from_id, a[7], a[3])
    list_of_anketi = []
    seen=[]

    for i in u_list_of_anketi:
      if i[1] not in seen:
        list_of_anketi.append(i)

    try:
      get_random_anketa(list_of_anketi)
    except ValueError:
      await message.answer('–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ç–µ–±–µ –Ω–∏–∫–æ–≥–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å ;(\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n–ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –Ω–µ –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ.\n\n–¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç "2", —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã')
      await message.answer(caption)
      await message.answer(my_anketa_text, keyboard = keyboard_menu)
      await bot.state_dispenser.set(message.from_id, Reg.my_anketa_answer)

    keyboard = Keyboard(one_time=True, inline = False)
    keyboard.add(Text("–î–∞–ª—å—à–µ"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))

    anketa = get_random_anketa(list_of_anketi)
    caption = anketa[0]
    seen.append(anketa[1])
    ctx.set(f'seen{message.from_id}', seen)

    await message.answer(message = caption, keyboard = keyboard)
    await bot.state_dispenser.set(message.from_id, Reg.anketa_reaction)

  elif message.text == "2":
    anketa = BotDB.get_anketa(message.from_id)
    a = anketa[0]
    caption = show_anketa(a[2], a[3], a[7], a[5], a[4])

    u_list_of_anketi = BotDB.get_all_anketi(message.from_id)
    list_of_anketi = []
    all_seen=[]

    for i in u_list_of_anketi:
      if i[1] not in all_seen:
        list_of_anketi.append(i)

    try:
      get_random_anketa(list_of_anketi)
    except ValueError:
      await message.answer("–¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ù–∞—à–∞ –±–∞–∑–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–±–æ–ª—å—à–∞—è, –Ω–æ –æ–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –ø–æ–ø—Ä–æ–±—É–π –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ")
      await message.answer(caption)
      await message.answer(my_anketa_text, keyboard = keyboard_menu)
      await bot.state_dispenser.set(message.from_id, Reg.my_anketa_answer)

    keyboard = Keyboard(one_time=True, inline = False)
    keyboard.add(Text("–î–∞–ª—å—à–µ"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))

    anketa = get_random_anketa(list_of_anketi)
    caption = anketa[0]
    all_seen.append(anketa[1])
    ctx.set(f'all_seen{message.from_id}', all_seen)

    await message.answer(message = caption, keyboard = keyboard)
    await bot.state_dispenser.set(message.from_id, Reg.all_anketa_reaction)    

  elif message.text == "3":
# Show form (anketa) in 4 strings

    anketa = BotDB.get_anketa(message.from_id)
    a = anketa[0]
    caption = show_anketa(a[2], a[3], a[7], a[5], a[4])

    await message.answer(caption)

    keyboard = Keyboard(one_time=False, inline = True)
    keyboard.add(Text("1"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text("2"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text("3"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text("4"), color=KeyboardButtonColor.PRIMARY)

    await message.answer(my_anketa_text, keyboard = keyboard)
    await bot.state_dispenser.set(message.from_id, Reg.my_anketa_answer)

  elif message.text == "4":
    keyboard = Keyboard(one_time=False, inline = True)
    keyboard.add(Text("–î–∞"), color=KeyboardButtonColor.NEGATIVE)
    keyboard.add(Text("–ù–µ—Ç"), color=KeyboardButtonColor.PRIMARY)

    await message.answer("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?", keyboard = keyboard)
    await bot.state_dispenser.set(message.from_id, Reg.delete_confirm)

  else:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫")
    return

@bot.on.message(state = Reg.anketa_reaction)
async def anketa_reaction(message: Message):
  if message.text == "–î–∞–ª—å—à–µ":
    anketa = BotDB.get_anketa(message.from_id)
    a = anketa[0]
    caption = show_anketa(a[2], a[3], a[7], a[5], a[4])

    u_list_of_anketi = BotDB.find_anketi(message.from_id, a[7], a[3])
    list_of_anketi = []

    for i in u_list_of_anketi:
      if i[1] not in ctx.get(f'seen{message.from_id}'):
        list_of_anketi.append(i)

    try:
      get_random_anketa(list_of_anketi)
    except ValueError:
      await message.answer("–ú–Ω–µ –±–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏–∫–æ–≥–æ –Ω–∞–π—Ç–∏ ;(\n–í–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –Ω–µ –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ.\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –µ—â–µ –∞–Ω–∫–µ—Ç—ã, –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã")
      await message.answer(caption)
      await message.answer(my_anketa_text, keyboard = keyboard_menu)
      await bot.state_dispenser.set(message.from_id, Reg.my_anketa_answer)

    keyboard = Keyboard(one_time=True, inline = False)
    keyboard.add(Text("–î–∞–ª—å—à–µ"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))
    anketa = get_random_anketa(list_of_anketi)

    caption = anketa[0]
    seen=ctx.get(f'seen{message.from_id}')
    seen.append(anketa[1])
    ctx.set(f'seen{message.from_id}', seen)

    await message.answer(message = caption, keyboard = keyboard)
    await bot.state_dispenser.set(message.from_id, Reg.anketa_reaction)

  elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":

    await message.answer(menu_main_text, keyboard = keyboard_menu)
    await bot.state_dispenser.set(message.from_id, Reg.menu_answer)
  else:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫")
    return

@bot.on.message(state = Reg.all_anketa_reaction)
async def anketa_reaction(message: Message):
  if message.text == "–î–∞–ª—å—à–µ":
    anketa = BotDB.get_anketa(message.from_id)
    a = anketa[0]
    caption = show_anketa(a[2], a[3], a[7], a[5], a[4])

    u_list_of_anketi = BotDB.get_all_anketi(message.from_id)
    list_of_anketi = []

    for i in u_list_of_anketi:
      if i[1] not in ctx.get(f'all_seen{message.from_id}'):
        list_of_anketi.append(i)

    try:
      get_random_anketa(list_of_anketi)
    except ValueError:
      await message.answer("–¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ù–∞—à–∞ –±–∞–∑–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–±–æ–ª—å—à–∞—è, –Ω–æ –æ–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –ø–æ–ø—Ä–æ–±—É–π –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ")
      await message.answer(caption)
      await message.answer(my_anketa_text, keyboard = keyboard_menu)
      await bot.state_dispenser.set(message.from_id, Reg.my_anketa_answer)

    keyboard = Keyboard(one_time=True, inline = False)
    keyboard.add(Text("–î–∞–ª—å—à–µ"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))
    anketa = get_random_anketa(list_of_anketi)

    caption = anketa[0]
    all_seen=ctx.get(f'all_seen{message.from_id}')
    all_seen.append(anketa[1])
    ctx.set(f'all_seen{message.from_id}', all_seen)

    await message.answer(message = caption, keyboard = keyboard)
    await bot.state_dispenser.set(message.from_id, Reg.all_anketa_reaction)

  elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":

    await message.answer(menu_main_text, keyboard = keyboard_menu)
    await bot.state_dispenser.set(message.from_id, Reg.menu_answer)
  else:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫")
    return

@bot.on.message(state = Reg.delete_confirm)
async def delete_confirm(message: Message):
  if message.text == "–î–∞":
    BotDB.delete_anketa(message.from_id)
    BotDB.delete_user(message.from_id)
    await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start", keyboard = EMPTY_KEYBOARD)
  elif message.text == "–ù–µ—Ç":
    anketa = BotDB.get_anketa(message.from_id)
    a = anketa[0]
    caption = show_anketa(a[2], a[3], a[7], a[5], a[4])
    await message.answer(caption)
    await message.answer(my_anketa_text, keyboard = keyboard_menu)
    await bot.state_dispenser.set(message.from_id, Reg.my_anketa_answer)
  else:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫")
    return

@bot.on.message(state = Reg.my_anketa_answer)
async def my_anketa_answer(message: Message):

  if message.text == "1":
    BotDB.delete_anketa(message.from_id)
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", keyboard=EMPTY_KEYBOARD)
    await bot.state_dispenser.set(message.from_id, Reg.name)

  elif message.text == "2":
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", keyboard=EMPTY_KEYBOARD)
    ctx.set(f'favorits{message.from_id}', message.text)
    await bot.state_dispenser.set(message.from_id, Reg.change_inter)

  elif message.text == "3":
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ", keyboard=EMPTY_KEYBOARD)
    ctx.set(f'text{message.from_id}', message.text)
    await bot.state_dispenser.set(message.from_id, Reg.change_text)

  elif message.text == "4":
    anketa = BotDB.get_anketa(message.from_id)
    a = anketa[0]
    caption = show_anketa(a[2], a[3], a[7], a[5], a[4])
    await message.answer(caption)
    await message.answer(menu_main_text, keyboard = keyboard_menu)
    await bot.state_dispenser.set(message.from_id, Reg.menu_answer)

  else:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫")
    return

@bot.on.message(state = Reg.change_text)
async def change_text(message: Message):
  BotDB.update_text(message.from_id, message.text)
  anketa = BotDB.get_anketa(message.from_id)
  a = anketa[0]
  caption = show_anketa(a[2], a[3], a[7], a[5], a[4])
  await message.answer(caption)
  await message.answer(menu_main_text, keyboard = keyboard_menu)
  await bot.state_dispenser.set(message.from_id, Reg.menu_answer)

@bot.on.message(state = Reg.change_inter)
async def change_text(message: Message):
  BotDB.update_inter(message.from_id, message.text)
  anketa = BotDB.get_anketa(message.from_id)
  a = anketa[0]
  caption = show_anketa(a[2], a[3], a[7], a[5], a[4])
  await message.answer(caption)
  await message.answer(menu_main_text, keyboard = keyboard_menu)
  await bot.state_dispenser.set(message.from_id, Reg.menu_answer)

if __name__ == "__main__":
    bot.run_forever()
